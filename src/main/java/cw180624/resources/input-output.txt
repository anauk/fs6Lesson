Небольшая памятка

Основные классы в системе I/O (выполняют роль интерфейса):
1. `InputStream` - позволяет прочитать *байты*
2. `OutputStream` - позволяет записать *байты*
3. `Reader` - позволяет прочитать *символы (char)*
4. `Writer` - позволяет записать *символы (char)*

Три вспомогательных типа классов в системе I/O (конкретная реализация):
1. Классы, которые подключают разные структуры данных к потокам ввода-вывода. Примеры - `FileReader, FileWriter, FileInputStream, ObjectInputStream, CharWriter`.
Начало класса говорит, с какой структурой данных мы будем работать (`File, ByteArray, String, Char, Object...`)
Конец класса говорит, какой тип потока мы получим (`InputStream, OutputStream, Reader, Writer`)

2. Классы-декораторы. Берут определенный тип потока, и добавляют к нему какой-то функционал. Пример - `BufferedReader, BufferedWriter, BufferedInputStream, FilterInputStream...`
Начало класса говорит, какой функционал добавляет данный декоратор (`Buffer, Filter...`)
Конец класса говорит, какой тип потока мы оборачиваем в этот декоратор (`InputStream, OutputStream, Reader, Writer`). На выходе мы обязательно получим такой же тип потока (`BufferedWriter` принимает в конструкторе любой `Writer`, и сам имеет тип также `Writer`)

3. Классы-адаптеры. Позволяют конвертировать потоки байтов/символов друг в друга. `InputStreamReader`, `OutputStreamWriter` (присутствуют в JDK), `ReaderInputStream`, `WriterOutputStream` (реализованы во внешних библиотеках, которые можно подключить, например, с помощью Мавена)

Общие схема создания потоков:

1. Создание переменной с потоком
`Тип_потока имя_переменной = поток`
`InputStream is = System.in;`

2. Создание потока из какой-то структуры данных
`Тип_потока имя_переменной = new класс_создания_потока(структура_данных)`
`FileWriter writer = new FileWriter(new File("names.txt"));`

3. Создание потока с оберткой для добавления функционала
`Декоратор имя_переменной = new декоратор(new класс_создания_потока(структура_данных))`
`BufferedWriter writer = new BufferedWriter(new FileWriter(new File("names.txt")));`

4. Декораторов можно использовать сколько угодно, чтобы по одному добавлять нужный функционал
`Декоратор_1 имя_переменной = new декоратор_1(new декоратор_2(new класс_создания_потока(структура_данных)))`
`GzipInputStream gis = new GzipInputStream(new BufferedInputStream(new FileInputStream(new File("names.txt"))));`
https://stackoverflow.com/questions/6366385/use-cases-and-examples-of-gof-decorator-pattern-for-io
В примере по ссылке класс создания потока находится даже над декораторами, так как его код отрабатывает последним и именно он сериализует объект в поток байтов

Преобразование потоков:
`тип_потока_1 имя_переменной = преобразователь_потока_2_в_1(поток 2)`
`Reader reader = new InputStreamReader(System.in);`

Вариант с декоратором:
`декоратор_потока_1 имя_переменной = new декоратор_потока_1(new преобразователь_потока_2_в_1(поток 2));`
`BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));`

Понимая типы классов и что они делают (читаем имя класса и ищем в нем ключевые слова), их можно комбинировать любым способом как конструктор :)